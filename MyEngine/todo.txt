- removeTextureBinding on pipelines isn't actually called after freeing a texture resource. Need to queue resource deletion in case it's being used due to multiple
frames in flight

- integrate vk-bootstrap 
- support downscaled resolution (run full screen at lower resolution the monitor resolution)

 - screen space textures (or all in one pipeline)

- fix getkeyup

- convert entity transform into component, store in contiguous memory, or use faster map. Then use compute shader to calculate
entity transform matrices for color/texture pipeline instead of per vertex calculation - profile first

- replace file path string concatenation with filesystem api (to elemenate having to check for trailing slahes on directory paths)

- Inter-bahaviour entity accessor

- general behaviour scene access for camera and common data needs

- player buffer jump input

delete large chunk transfer buffer after world is loaded in. Create functions to repeate this process easily

could have some sort of optional set on an entity listing what components it's using to make it faster to delete them

reserve scene component maps with max count to prevenent rehashing which would break getComponent pointers. GPT told me this, is it even real?
- same with pipiline texture references which use raw pointers

- replace upload text data function with zero copy method for uploading data

- shader auto workflow with sprv reflect

- create default font

- create bulk generate texture function to avoid having to recreate staging buffers and synchronize the graphics queue for every single texture creation

things to abstract:

- buffer management (group allocation and buffer, see vkguide)

- descriptor pool sizes

- query maxComputeWorkGroupCount, maxComputeWorkGroupInvocations, and maxComputeWorkGroupSize to determine max work group size

- for mapped double buffers (instancing, lighting), populate data directly into void pointer instead constructing an array and calling memcpy

---- features:

- texture animator

- partical system

- more physics features. raycast, collision detection, layers, user entity variable in body