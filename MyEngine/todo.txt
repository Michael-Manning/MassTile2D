
Near roadmap:

pipeline.
- replace screenspace versions of pipelines with specialization constants
- bring back up triangle pipeline

- set lightmap to full bright when not using tilemap or in editor prefab preview scene

- should create a version of the text pipeline that packs quads tightly instead of in groups on max textlength.
Currently the drawlist gets completely re uploaded every frame and well as the scene text renderers, so the potential performance 
benefit of only reuploading changed text for scene text objects is not even being taken advantage of right now.

- for none-moving light sources (lights fixed to the grid), implement this line algorithm for thoeretically faster shadows:
https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm

- only trigger base lighting updates on setTile() when setting the tile from air to not air or vice versa (still need blur to overwrite forground lighting bits invalidated by buffer copy)

- support rendering lightmap at half resolution

- could triple buffer drawlist data to allow direct gpu map insertion and avoid copy when recording commandbuffers. Oy maybe manually flushing
memory ranges could also allow this with current 2 buffers without breaking synchronization?

-investigate or measure mouse latency. At high framerates, work computer has imperceptible mouse latency, while home computer it is percetpable

- support glfw raw mouse motion. Add custom cursor icon for in-game 

- move all serialize function to source files instead of ecs.cpp

- switch all deserialization functions to constructors for uniformity, simplicity, as well as slight performance boost as components could all
be emplaced into maps instead of constructed, coppied, and destructed;

- only enable used device features instead of enabling everything for the sake of bindless textures

- support downscaled resolution (run full screen at lower resolution than monitor resolution)

- run main loop in a different thread so game logic doesn't freeze whem moving window

- allow mapped buffer creation with explicit flushing of memory ranges

- replace file path string concatenation all over engine with filesystem api (to elemenate having to check for trailing slahes on directory paths)

- player buffer jump input

delete large chunk transfer buffer after world is loaded in. Create functions to repeate this process easily

could have some sort of optional set on an entity listing what components it's using to make it faster to delete them

- replace upload text data function with zero copy method for uploading data

- create default font

- check if the the swapchain is out of date earlier in the engine loop so that we can potentially bail out of submitting work which will not
be displayed which should reduce latency

- create bulk generate texture function to avoid having to recreate staging buffers and synchronize the graphics queue for every single texture creation

- query maxComputeWorkGroupCount, maxComputeWorkGroupInvocations, and maxComputeWorkGroupSize to determine max work group size

- disallow rigidbodies on child entities

- change particle system rendere host allocation logic to delay actual creation of the particle buffer until/if the particle data is actually accessed.
There are instances such as with prefab loading that a particle system renderer allocates a large host buffer, but the data is never actually used
for anything, and the class is just used as a clone template

- entity names should not be part of compilation in publish build

---- things to abstract:

- buffer management (group allocation and buffer, see vkguide)

- descriptor pool sizes

- colored quad/triangles could use a different vertex type which doesn't include UV data

---- features:

- texture animator

- more physics features. raycast, collision detection, layers, user entity variable in body
