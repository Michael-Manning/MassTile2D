// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKAGELAYOUT_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_PACKAGELAYOUT_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace AssetPack {

struct PackageLayout;
struct PackageLayoutBuilder;

struct PackageLayout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PackageLayoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPRITENAMES = 4,
    VT_SPRITEIDS = 6,
    VT_FONTNAMES = 8,
    VT_FONTIDS = 10,
    VT_PREFABNAMES = 12,
    VT_SCENENAMES = 14,
    VT_RESOURCEFILENAMES = 16,
    VT_RESOURCEFILESIZES = 18
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *spriteNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPRITENAMES);
  }
  const ::flatbuffers::Vector<uint32_t> *spriteIDs() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_SPRITEIDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *fontNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FONTNAMES);
  }
  const ::flatbuffers::Vector<uint32_t> *fontIDs() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_FONTIDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *prefabNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PREFABNAMES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sceneNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SCENENAMES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *resourceFileNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RESOURCEFILENAMES);
  }
  const ::flatbuffers::Vector<uint32_t> *resourceFileSizes() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_RESOURCEFILESIZES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPRITENAMES) &&
           verifier.VerifyVector(spriteNames()) &&
           verifier.VerifyVectorOfStrings(spriteNames()) &&
           VerifyOffset(verifier, VT_SPRITEIDS) &&
           verifier.VerifyVector(spriteIDs()) &&
           VerifyOffset(verifier, VT_FONTNAMES) &&
           verifier.VerifyVector(fontNames()) &&
           verifier.VerifyVectorOfStrings(fontNames()) &&
           VerifyOffset(verifier, VT_FONTIDS) &&
           verifier.VerifyVector(fontIDs()) &&
           VerifyOffset(verifier, VT_PREFABNAMES) &&
           verifier.VerifyVector(prefabNames()) &&
           verifier.VerifyVectorOfStrings(prefabNames()) &&
           VerifyOffset(verifier, VT_SCENENAMES) &&
           verifier.VerifyVector(sceneNames()) &&
           verifier.VerifyVectorOfStrings(sceneNames()) &&
           VerifyOffset(verifier, VT_RESOURCEFILENAMES) &&
           verifier.VerifyVector(resourceFileNames()) &&
           verifier.VerifyVectorOfStrings(resourceFileNames()) &&
           VerifyOffset(verifier, VT_RESOURCEFILESIZES) &&
           verifier.VerifyVector(resourceFileSizes()) &&
           verifier.EndTable();
  }
};

struct PackageLayoutBuilder {
  typedef PackageLayout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_spriteNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spriteNames) {
    fbb_.AddOffset(PackageLayout::VT_SPRITENAMES, spriteNames);
  }
  void add_spriteIDs(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> spriteIDs) {
    fbb_.AddOffset(PackageLayout::VT_SPRITEIDS, spriteIDs);
  }
  void add_fontNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> fontNames) {
    fbb_.AddOffset(PackageLayout::VT_FONTNAMES, fontNames);
  }
  void add_fontIDs(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> fontIDs) {
    fbb_.AddOffset(PackageLayout::VT_FONTIDS, fontIDs);
  }
  void add_prefabNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> prefabNames) {
    fbb_.AddOffset(PackageLayout::VT_PREFABNAMES, prefabNames);
  }
  void add_sceneNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sceneNames) {
    fbb_.AddOffset(PackageLayout::VT_SCENENAMES, sceneNames);
  }
  void add_resourceFileNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> resourceFileNames) {
    fbb_.AddOffset(PackageLayout::VT_RESOURCEFILENAMES, resourceFileNames);
  }
  void add_resourceFileSizes(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> resourceFileSizes) {
    fbb_.AddOffset(PackageLayout::VT_RESOURCEFILESIZES, resourceFileSizes);
  }
  explicit PackageLayoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PackageLayout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PackageLayout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PackageLayout> CreatePackageLayout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spriteNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> spriteIDs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> fontNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> fontIDs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> prefabNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sceneNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> resourceFileNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> resourceFileSizes = 0) {
  PackageLayoutBuilder builder_(_fbb);
  builder_.add_resourceFileSizes(resourceFileSizes);
  builder_.add_resourceFileNames(resourceFileNames);
  builder_.add_sceneNames(sceneNames);
  builder_.add_prefabNames(prefabNames);
  builder_.add_fontIDs(fontIDs);
  builder_.add_fontNames(fontNames);
  builder_.add_spriteIDs(spriteIDs);
  builder_.add_spriteNames(spriteNames);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PackageLayout> CreatePackageLayoutDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *spriteNames = nullptr,
    const std::vector<uint32_t> *spriteIDs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *fontNames = nullptr,
    const std::vector<uint32_t> *fontIDs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *prefabNames = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sceneNames = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *resourceFileNames = nullptr,
    const std::vector<uint32_t> *resourceFileSizes = nullptr) {
  auto spriteNames__ = spriteNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*spriteNames) : 0;
  auto spriteIDs__ = spriteIDs ? _fbb.CreateVector<uint32_t>(*spriteIDs) : 0;
  auto fontNames__ = fontNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*fontNames) : 0;
  auto fontIDs__ = fontIDs ? _fbb.CreateVector<uint32_t>(*fontIDs) : 0;
  auto prefabNames__ = prefabNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*prefabNames) : 0;
  auto sceneNames__ = sceneNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sceneNames) : 0;
  auto resourceFileNames__ = resourceFileNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*resourceFileNames) : 0;
  auto resourceFileSizes__ = resourceFileSizes ? _fbb.CreateVector<uint32_t>(*resourceFileSizes) : 0;
  return AssetPack::CreatePackageLayout(
      _fbb,
      spriteNames__,
      spriteIDs__,
      fontNames__,
      fontIDs__,
      prefabNames__,
      sceneNames__,
      resourceFileNames__,
      resourceFileSizes__);
}

inline const AssetPack::PackageLayout *GetPackageLayout(const void *buf) {
  return ::flatbuffers::GetRoot<AssetPack::PackageLayout>(buf);
}

inline const AssetPack::PackageLayout *GetSizePrefixedPackageLayout(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AssetPack::PackageLayout>(buf);
}

inline bool VerifyPackageLayoutBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AssetPack::PackageLayout>(nullptr);
}

inline bool VerifySizePrefixedPackageLayoutBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AssetPack::PackageLayout>(nullptr);
}

inline void FinishPackageLayoutBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageLayout> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPackageLayoutBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageLayout> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_PACKAGELAYOUT_ASSETPACK_H_
