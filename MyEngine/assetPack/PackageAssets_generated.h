// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKAGEASSETS_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_PACKAGEASSETS_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Font_generated.h"
#include "Scene_generated.h"
#include "Sprite_generated.h"
#include "common_generated.h"
#include "prefab_generated.h"

namespace AssetPack {

struct PackageAssets;
struct PackageAssetsBuilder;

struct PackageAssets FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PackageAssetsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPRITES = 4,
    VT_FONTS = 6,
    VT_PREFABS = 8,
    VT_SCENES = 10
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Sprite>> *sprites() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Sprite>> *>(VT_SPRITES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Font>> *fonts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Font>> *>(VT_FONTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Prefab>> *prefabs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Prefab>> *>(VT_PREFABS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Scene>> *scenes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Scene>> *>(VT_SCENES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPRITES) &&
           verifier.VerifyVector(sprites()) &&
           verifier.VerifyVectorOfTables(sprites()) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.VerifyVector(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           VerifyOffset(verifier, VT_PREFABS) &&
           verifier.VerifyVector(prefabs()) &&
           verifier.VerifyVectorOfTables(prefabs()) &&
           VerifyOffset(verifier, VT_SCENES) &&
           verifier.VerifyVector(scenes()) &&
           verifier.VerifyVectorOfTables(scenes()) &&
           verifier.EndTable();
  }
};

struct PackageAssetsBuilder {
  typedef PackageAssets Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sprites(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Sprite>>> sprites) {
    fbb_.AddOffset(PackageAssets::VT_SPRITES, sprites);
  }
  void add_fonts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Font>>> fonts) {
    fbb_.AddOffset(PackageAssets::VT_FONTS, fonts);
  }
  void add_prefabs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Prefab>>> prefabs) {
    fbb_.AddOffset(PackageAssets::VT_PREFABS, prefabs);
  }
  void add_scenes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Scene>>> scenes) {
    fbb_.AddOffset(PackageAssets::VT_SCENES, scenes);
  }
  explicit PackageAssetsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PackageAssets> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PackageAssets>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PackageAssets> CreatePackageAssets(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Sprite>>> sprites = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Font>>> fonts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Prefab>>> prefabs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Scene>>> scenes = 0) {
  PackageAssetsBuilder builder_(_fbb);
  builder_.add_scenes(scenes);
  builder_.add_prefabs(prefabs);
  builder_.add_fonts(fonts);
  builder_.add_sprites(sprites);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PackageAssets> CreatePackageAssetsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<AssetPack::Sprite>> *sprites = nullptr,
    const std::vector<::flatbuffers::Offset<AssetPack::Font>> *fonts = nullptr,
    const std::vector<::flatbuffers::Offset<AssetPack::Prefab>> *prefabs = nullptr,
    const std::vector<::flatbuffers::Offset<AssetPack::Scene>> *scenes = nullptr) {
  auto sprites__ = sprites ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::Sprite>>(*sprites) : 0;
  auto fonts__ = fonts ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::Font>>(*fonts) : 0;
  auto prefabs__ = prefabs ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::Prefab>>(*prefabs) : 0;
  auto scenes__ = scenes ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::Scene>>(*scenes) : 0;
  return AssetPack::CreatePackageAssets(
      _fbb,
      sprites__,
      fonts__,
      prefabs__,
      scenes__);
}

inline const AssetPack::PackageAssets *GetPackageAssets(const void *buf) {
  return ::flatbuffers::GetRoot<AssetPack::PackageAssets>(buf);
}

inline const AssetPack::PackageAssets *GetSizePrefixedPackageAssets(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AssetPack::PackageAssets>(buf);
}

inline bool VerifyPackageAssetsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AssetPack::PackageAssets>(nullptr);
}

inline bool VerifySizePrefixedPackageAssetsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AssetPack::PackageAssets>(nullptr);
}

inline void FinishPackageAssetsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageAssets> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPackageAssetsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageAssets> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_PACKAGEASSETS_ASSETPACK_H_
