// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLDDATA_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_WORLDDATA_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "SceneEntities_generated.h"
#include "common_generated.h"

namespace AssetPack {

struct WorldData;
struct WorldDataBuilder;

struct WorldData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WorldDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHUNKS = 4,
    VT_CHUNKINDEX = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::ChunkData>> *chunks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::ChunkData>> *>(VT_CHUNKS);
  }
  const ::flatbuffers::Vector<int32_t> *chunkIndex() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_CHUNKINDEX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHUNKS) &&
           verifier.VerifyVector(chunks()) &&
           verifier.VerifyVectorOfTables(chunks()) &&
           VerifyOffset(verifier, VT_CHUNKINDEX) &&
           verifier.VerifyVector(chunkIndex()) &&
           verifier.EndTable();
  }
};

struct WorldDataBuilder {
  typedef WorldData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chunks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::ChunkData>>> chunks) {
    fbb_.AddOffset(WorldData::VT_CHUNKS, chunks);
  }
  void add_chunkIndex(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> chunkIndex) {
    fbb_.AddOffset(WorldData::VT_CHUNKINDEX, chunkIndex);
  }
  explicit WorldDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WorldData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WorldData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WorldData> CreateWorldData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::ChunkData>>> chunks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> chunkIndex = 0) {
  WorldDataBuilder builder_(_fbb);
  builder_.add_chunkIndex(chunkIndex);
  builder_.add_chunks(chunks);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<WorldData> CreateWorldDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<AssetPack::ChunkData>> *chunks = nullptr,
    const std::vector<int32_t> *chunkIndex = nullptr) {
  auto chunks__ = chunks ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::ChunkData>>(*chunks) : 0;
  auto chunkIndex__ = chunkIndex ? _fbb.CreateVector<int32_t>(*chunkIndex) : 0;
  return AssetPack::CreateWorldData(
      _fbb,
      chunks__,
      chunkIndex__);
}

inline const AssetPack::WorldData *GetWorldData(const void *buf) {
  return ::flatbuffers::GetRoot<AssetPack::WorldData>(buf);
}

inline const AssetPack::WorldData *GetSizePrefixedWorldData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AssetPack::WorldData>(buf);
}

inline bool VerifyWorldDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AssetPack::WorldData>(nullptr);
}

inline bool VerifySizePrefixedWorldDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AssetPack::WorldData>(nullptr);
}

inline void FinishWorldDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::WorldData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWorldDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::WorldData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_WORLDDATA_ASSETPACK_H_
