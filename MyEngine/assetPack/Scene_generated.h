// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENE_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_SCENE_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

#include "SceneData_generated.h"
#include "common_generated.h"

namespace AssetPack {

struct Scene;
struct SceneBuilder;

struct Scene FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SCENEDATA = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const AssetPack::SceneData *sceneData() const {
    return GetPointer<const AssetPack::SceneData *>(VT_SCENEDATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SCENEDATA) &&
           verifier.VerifyTable(sceneData()) &&
           verifier.EndTable();
  }
};

struct SceneBuilder {
  typedef Scene Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Scene::VT_NAME, name);
  }
  void add_sceneData(::flatbuffers::Offset<AssetPack::SceneData> sceneData) {
    fbb_.AddOffset(Scene::VT_SCENEDATA, sceneData);
  }
  explicit SceneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Scene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Scene>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Scene> CreateScene(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<AssetPack::SceneData> sceneData = 0) {
  SceneBuilder builder_(_fbb);
  builder_.add_sceneData(sceneData);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Scene> CreateSceneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<AssetPack::SceneData> sceneData = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return AssetPack::CreateScene(
      _fbb,
      name__,
      sceneData);
}

inline const AssetPack::Scene *GetScene(const void *buf) {
  return ::flatbuffers::GetRoot<AssetPack::Scene>(buf);
}

inline const AssetPack::Scene *GetSizePrefixedScene(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AssetPack::Scene>(buf);
}

inline bool VerifySceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AssetPack::Scene>(nullptr);
}

inline bool VerifySizePrefixedSceneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AssetPack::Scene>(nullptr);
}

inline void FinishSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::Scene> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::Scene> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_SCENE_ASSETPACK_H_
