// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKAGEHEADER_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_PACKAGEHEADER_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace AssetPack {

struct PackageHeader;
struct PackageHeaderBuilder;

struct PackageHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PackageHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADERSIZE = 4,
    VT_LAYOUTSIZE = 6,
    VT_ASSETSSIZE = 8,
    VT_RESOURCESSIZE = 10
  };
  uint32_t HeaderSize() const {
    return GetField<uint32_t>(VT_HEADERSIZE, 0);
  }
  uint32_t LayoutSize() const {
    return GetField<uint32_t>(VT_LAYOUTSIZE, 0);
  }
  uint32_t AssetsSize() const {
    return GetField<uint32_t>(VT_ASSETSSIZE, 0);
  }
  uint32_t ResourcesSize() const {
    return GetField<uint32_t>(VT_RESOURCESSIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_HEADERSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_LAYOUTSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ASSETSSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_RESOURCESSIZE, 4) &&
           verifier.EndTable();
  }
};

struct PackageHeaderBuilder {
  typedef PackageHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_HeaderSize(uint32_t HeaderSize) {
    fbb_.AddElement<uint32_t>(PackageHeader::VT_HEADERSIZE, HeaderSize, 0);
  }
  void add_LayoutSize(uint32_t LayoutSize) {
    fbb_.AddElement<uint32_t>(PackageHeader::VT_LAYOUTSIZE, LayoutSize, 0);
  }
  void add_AssetsSize(uint32_t AssetsSize) {
    fbb_.AddElement<uint32_t>(PackageHeader::VT_ASSETSSIZE, AssetsSize, 0);
  }
  void add_ResourcesSize(uint32_t ResourcesSize) {
    fbb_.AddElement<uint32_t>(PackageHeader::VT_RESOURCESSIZE, ResourcesSize, 0);
  }
  explicit PackageHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PackageHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PackageHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PackageHeader> CreatePackageHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t HeaderSize = 0,
    uint32_t LayoutSize = 0,
    uint32_t AssetsSize = 0,
    uint32_t ResourcesSize = 0) {
  PackageHeaderBuilder builder_(_fbb);
  builder_.add_ResourcesSize(ResourcesSize);
  builder_.add_AssetsSize(AssetsSize);
  builder_.add_LayoutSize(LayoutSize);
  builder_.add_HeaderSize(HeaderSize);
  return builder_.Finish();
}

inline const AssetPack::PackageHeader *GetPackageHeader(const void *buf) {
  return ::flatbuffers::GetRoot<AssetPack::PackageHeader>(buf);
}

inline const AssetPack::PackageHeader *GetSizePrefixedPackageHeader(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AssetPack::PackageHeader>(buf);
}

inline bool VerifyPackageHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AssetPack::PackageHeader>(nullptr);
}

inline bool VerifySizePrefixedPackageHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AssetPack::PackageHeader>(nullptr);
}

inline void FinishPackageHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPackageHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AssetPack::PackageHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_PACKAGEHEADER_ASSETPACK_H_
