// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENEENTITIES_ASSETPACK_H_
#define FLATBUFFERS_GENERATED_SCENEENTITIES_ASSETPACK_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace AssetPack {

struct MapEntityBase;

struct ItemStack;

struct InventoryContainer;
struct InventoryContainerBuilder;

struct Chest;
struct ChestBuilder;

struct ChunkData;
struct ChunkDataBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) MapEntityBase FLATBUFFERS_FINAL_CLASS {
 private:
  AssetPack::ivec2 position_;
  AssetPack::ivec2 size_;

 public:
  MapEntityBase()
      : position_(),
        size_() {
  }
  MapEntityBase(const AssetPack::ivec2 &_position, const AssetPack::ivec2 &_size)
      : position_(_position),
        size_(_size) {
  }
  const AssetPack::ivec2 &position() const {
    return position_;
  }
  const AssetPack::ivec2 &size() const {
    return size_;
  }
};
FLATBUFFERS_STRUCT_END(MapEntityBase, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ItemStack FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t item_;
  int32_t count_;
  uint32_t dynmicIdentifier_;

 public:
  ItemStack()
      : item_(0),
        count_(0),
        dynmicIdentifier_(0) {
  }
  ItemStack(uint32_t _item, int32_t _count, uint32_t _dynmicIdentifier)
      : item_(::flatbuffers::EndianScalar(_item)),
        count_(::flatbuffers::EndianScalar(_count)),
        dynmicIdentifier_(::flatbuffers::EndianScalar(_dynmicIdentifier)) {
  }
  uint32_t item() const {
    return ::flatbuffers::EndianScalar(item_);
  }
  int32_t count() const {
    return ::flatbuffers::EndianScalar(count_);
  }
  uint32_t dynmicIdentifier() const {
    return ::flatbuffers::EndianScalar(dynmicIdentifier_);
  }
};
FLATBUFFERS_STRUCT_END(ItemStack, 12);

struct InventoryContainer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InventoryContainerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_SLOTS = 6
  };
  int32_t size() const {
    return GetField<int32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<const AssetPack::ItemStack *> *slots() const {
    return GetPointer<const ::flatbuffers::Vector<const AssetPack::ItemStack *> *>(VT_SLOTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_SLOTS) &&
           verifier.VerifyVector(slots()) &&
           verifier.EndTable();
  }
};

struct InventoryContainerBuilder {
  typedef InventoryContainer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(int32_t size) {
    fbb_.AddElement<int32_t>(InventoryContainer::VT_SIZE, size, 0);
  }
  void add_slots(::flatbuffers::Offset<::flatbuffers::Vector<const AssetPack::ItemStack *>> slots) {
    fbb_.AddOffset(InventoryContainer::VT_SLOTS, slots);
  }
  explicit InventoryContainerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InventoryContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InventoryContainer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InventoryContainer> CreateInventoryContainer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const AssetPack::ItemStack *>> slots = 0) {
  InventoryContainerBuilder builder_(_fbb);
  builder_.add_slots(slots);
  builder_.add_size(size);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InventoryContainer> CreateInventoryContainerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t size = 0,
    const std::vector<AssetPack::ItemStack> *slots = nullptr) {
  auto slots__ = slots ? _fbb.CreateVectorOfStructs<AssetPack::ItemStack>(*slots) : 0;
  return AssetPack::CreateInventoryContainer(
      _fbb,
      size,
      slots__);
}

struct Chest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAPEENTITY = 4,
    VT_CONTAINER = 6
  };
  const AssetPack::MapEntityBase *MapeEntity() const {
    return GetStruct<const AssetPack::MapEntityBase *>(VT_MAPEENTITY);
  }
  const AssetPack::InventoryContainer *container() const {
    return GetPointer<const AssetPack::InventoryContainer *>(VT_CONTAINER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<AssetPack::MapEntityBase>(verifier, VT_MAPEENTITY, 4) &&
           VerifyOffset(verifier, VT_CONTAINER) &&
           verifier.VerifyTable(container()) &&
           verifier.EndTable();
  }
};

struct ChestBuilder {
  typedef Chest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_MapeEntity(const AssetPack::MapEntityBase *MapeEntity) {
    fbb_.AddStruct(Chest::VT_MAPEENTITY, MapeEntity);
  }
  void add_container(::flatbuffers::Offset<AssetPack::InventoryContainer> container) {
    fbb_.AddOffset(Chest::VT_CONTAINER, container);
  }
  explicit ChestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Chest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Chest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Chest> CreateChest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const AssetPack::MapEntityBase *MapeEntity = nullptr,
    ::flatbuffers::Offset<AssetPack::InventoryContainer> container = 0) {
  ChestBuilder builder_(_fbb);
  builder_.add_container(container);
  builder_.add_MapeEntity(MapeEntity);
  return builder_.Finish();
}

struct ChunkData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChunkDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHESTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Chest>> *chests() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Chest>> *>(VT_CHESTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHESTS) &&
           verifier.VerifyVector(chests()) &&
           verifier.VerifyVectorOfTables(chests()) &&
           verifier.EndTable();
  }
};

struct ChunkDataBuilder {
  typedef ChunkData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chests(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Chest>>> chests) {
    fbb_.AddOffset(ChunkData::VT_CHESTS, chests);
  }
  explicit ChunkDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChunkData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChunkData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChunkData> CreateChunkData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<AssetPack::Chest>>> chests = 0) {
  ChunkDataBuilder builder_(_fbb);
  builder_.add_chests(chests);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChunkData> CreateChunkDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<AssetPack::Chest>> *chests = nullptr) {
  auto chests__ = chests ? _fbb.CreateVector<::flatbuffers::Offset<AssetPack::Chest>>(*chests) : 0;
  return AssetPack::CreateChunkData(
      _fbb,
      chests__);
}

}  // namespace AssetPack

#endif  // FLATBUFFERS_GENERATED_SCENEENTITIES_ASSETPACK_H_
