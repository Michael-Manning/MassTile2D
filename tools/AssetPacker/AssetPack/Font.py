# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AssetPack

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Font(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Font()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFont(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Font
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Font
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Font
    def FirstChar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Font
    def CharCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Font
    def FontHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Font
    def Baseline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Font
    def LineGap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Font
    def Atlas(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Font
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Font
    def PackedChars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 36
            from AssetPack.packedChar import packedChar
            obj = packedChar()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Font
    def PackedCharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Font
    def PackedCharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Font
    def KerningTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Font
    def KerningTableAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Font
    def KerningTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Font
    def KerningTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def FontStart(builder):
    builder.StartObject(10)

def Start(builder):
    FontStart(builder)

def FontAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    FontAddName(builder, name)

def FontAddFirstChar(builder, firstChar):
    builder.PrependInt32Slot(1, firstChar, 0)

def AddFirstChar(builder, firstChar):
    FontAddFirstChar(builder, firstChar)

def FontAddCharCount(builder, charCount):
    builder.PrependInt32Slot(2, charCount, 0)

def AddCharCount(builder, charCount):
    FontAddCharCount(builder, charCount)

def FontAddFontHeight(builder, fontHeight):
    builder.PrependFloat32Slot(3, fontHeight, 0.0)

def AddFontHeight(builder, fontHeight):
    FontAddFontHeight(builder, fontHeight)

def FontAddBaseline(builder, baseline):
    builder.PrependFloat32Slot(4, baseline, 0.0)

def AddBaseline(builder, baseline):
    FontAddBaseline(builder, baseline)

def FontAddLineGap(builder, lineGap):
    builder.PrependFloat32Slot(5, lineGap, 0.0)

def AddLineGap(builder, lineGap):
    FontAddLineGap(builder, lineGap)

def FontAddAtlas(builder, atlas):
    builder.PrependUint32Slot(6, atlas, 0)

def AddAtlas(builder, atlas):
    FontAddAtlas(builder, atlas)

def FontAddId(builder, id):
    builder.PrependUint32Slot(7, id, 0)

def AddId(builder, id):
    FontAddId(builder, id)

def FontAddPackedChars(builder, packedChars):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(packedChars), 0)

def AddPackedChars(builder, packedChars):
    FontAddPackedChars(builder, packedChars)

def FontStartPackedCharsVector(builder, numElems):
    return builder.StartVector(36, numElems, 4)

def StartPackedCharsVector(builder, numElems: int) -> int:
    return FontStartPackedCharsVector(builder, numElems)

def FontAddKerningTable(builder, kerningTable):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(kerningTable), 0)

def AddKerningTable(builder, kerningTable):
    FontAddKerningTable(builder, kerningTable)

def FontStartKerningTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKerningTableVector(builder, numElems: int) -> int:
    return FontStartKerningTableVector(builder, numElems)

def FontEnd(builder):
    return builder.EndObject()

def End(builder):
    return FontEnd(builder)
