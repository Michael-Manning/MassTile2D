# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AssetPack

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class packedChar(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 36

    # packedChar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # packedChar
    def Uvmin(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # packedChar
    def Uvmax(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 8)
        return obj

    # packedChar
    def Scale(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 16)
        return obj

    # packedChar
    def XOff(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # packedChar
    def YOff(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # packedChar
    def XAdvance(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))

def CreatepackedChar(builder, uvmin_x, uvmin_y, uvmax_x, uvmax_y, scale_x, scale_y, xOff, yOff, xAdvance):
    builder.Prep(4, 36)
    builder.PrependFloat32(xAdvance)
    builder.PrependFloat32(yOff)
    builder.PrependFloat32(xOff)
    builder.Prep(4, 8)
    builder.PrependFloat32(scale_y)
    builder.PrependFloat32(scale_x)
    builder.Prep(4, 8)
    builder.PrependFloat32(uvmax_y)
    builder.PrependFloat32(uvmax_x)
    builder.Prep(4, 8)
    builder.PrependFloat32(uvmin_y)
    builder.PrependFloat32(uvmin_x)
    return builder.Offset()
