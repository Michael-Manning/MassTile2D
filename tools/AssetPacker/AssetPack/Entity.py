# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AssetPack

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Entity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Entity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEntity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Entity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Entity
    def BehaviorHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Entity
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Entity
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Entity
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from AssetPack.Transform import Transform
            obj = Transform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def EntityStart(builder):
    builder.StartObject(4)

def Start(builder):
    EntityStart(builder)

def EntityAddBehaviorHash(builder, behaviorHash):
    builder.PrependUint32Slot(0, behaviorHash, 0)

def AddBehaviorHash(builder, behaviorHash):
    EntityAddBehaviorHash(builder, behaviorHash)

def EntityAddId(builder, id):
    builder.PrependUint32Slot(1, id, 0)

def AddId(builder, id):
    EntityAddId(builder, id)

def EntityAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    EntityAddName(builder, name)

def EntityAddTransform(builder, transform):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)

def AddTransform(builder, transform):
    EntityAddTransform(builder, transform)

def EntityEnd(builder):
    return builder.EndObject()

def End(builder):
    return EntityEnd(builder)
