# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AssetPack

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Scene(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scene()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScene(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Scene
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Scene
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Scene
    def Entities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from AssetPack.Entity import Entity
            obj = Entity()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def EntitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def EntitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Scene
    def ColorRenderers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from AssetPack.ColorRenderer import ColorRenderer
            obj = ColorRenderer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def ColorRenderersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def ColorRenderersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Scene
    def SpriteRenderers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from AssetPack.SpriteRenderer import SpriteRenderer
            obj = SpriteRenderer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def SpriteRenderersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def SpriteRenderersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Scene
    def TextRenderers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from AssetPack.TextRenderer import TextRenderer
            obj = TextRenderer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def TextRenderersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def TextRenderersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Scene
    def Rigidbodies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 52
            from AssetPack.Rigidbody import Rigidbody
            obj = Rigidbody()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def RigidbodiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def RigidbodiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Scene
    def Staticbodies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 20
            from AssetPack.Staticbody import Staticbody
            obj = Staticbody()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def StaticbodiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def StaticbodiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def SceneStart(builder):
    builder.StartObject(7)

def Start(builder):
    SceneStart(builder)

def SceneAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SceneAddName(builder, name)

def SceneAddEntities(builder, entities):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(entities), 0)

def AddEntities(builder, entities):
    SceneAddEntities(builder, entities)

def SceneStartEntitiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEntitiesVector(builder, numElems: int) -> int:
    return SceneStartEntitiesVector(builder, numElems)

def SceneAddColorRenderers(builder, colorRenderers):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(colorRenderers), 0)

def AddColorRenderers(builder, colorRenderers):
    SceneAddColorRenderers(builder, colorRenderers)

def SceneStartColorRenderersVector(builder, numElems):
    return builder.StartVector(24, numElems, 4)

def StartColorRenderersVector(builder, numElems: int) -> int:
    return SceneStartColorRenderersVector(builder, numElems)

def SceneAddSpriteRenderers(builder, spriteRenderers):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spriteRenderers), 0)

def AddSpriteRenderers(builder, spriteRenderers):
    SceneAddSpriteRenderers(builder, spriteRenderers)

def SceneStartSpriteRenderersVector(builder, numElems):
    return builder.StartVector(12, numElems, 4)

def StartSpriteRenderersVector(builder, numElems: int) -> int:
    return SceneStartSpriteRenderersVector(builder, numElems)

def SceneAddTextRenderers(builder, textRenderers):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(textRenderers), 0)

def AddTextRenderers(builder, textRenderers):
    SceneAddTextRenderers(builder, textRenderers)

def SceneStartTextRenderersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTextRenderersVector(builder, numElems: int) -> int:
    return SceneStartTextRenderersVector(builder, numElems)

def SceneAddRigidbodies(builder, rigidbodies):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rigidbodies), 0)

def AddRigidbodies(builder, rigidbodies):
    SceneAddRigidbodies(builder, rigidbodies)

def SceneStartRigidbodiesVector(builder, numElems):
    return builder.StartVector(52, numElems, 4)

def StartRigidbodiesVector(builder, numElems: int) -> int:
    return SceneStartRigidbodiesVector(builder, numElems)

def SceneAddStaticbodies(builder, staticbodies):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(staticbodies), 0)

def AddStaticbodies(builder, staticbodies):
    SceneAddStaticbodies(builder, staticbodies)

def SceneStartStaticbodiesVector(builder, numElems):
    return builder.StartVector(20, numElems, 4)

def StartStaticbodiesVector(builder, numElems: int) -> int:
    return SceneStartStaticbodiesVector(builder, numElems)

def SceneEnd(builder):
    return builder.EndObject()

def End(builder):
    return SceneEnd(builder)
