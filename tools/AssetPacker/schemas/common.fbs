namespace AssetPack;

struct vec2 {
    x:float;
    y:float;
}

struct vec4 {
    r:float;
    g:float;
    b:float;
    a:float;
}

enum FilterMode : int {
    Nearest = 0,
    Linear
}

enum Shape : int {
    Rectangle = 0,
    Circle
}

struct Transform{
    position:vec2;
    rotation:float;
    scale:vec2;
}

struct SpriteRenderer{
    atlasIndex:int;
    entityID:uint;
    spriteID:uint;
}

struct ColorRenderer{
    color:vec4;
    shape:Shape;
    entityID:uint;
}

table TextRenderer{
    entityID:uint;
    text:string;
    fontID:uint;
    color:vec4;
}

struct Collider{
    type:int;
    radius:float;
    scale:vec2;
}

struct Rigidbody{
    entityID:uint;
    collider:Collider;
    linearDamping:float;
    angularDamping:float;
    fixedRotation:float;
    bullet:bool;
    gravityScale:float;
    friction:float;
    density:float;
    restitution:float;
}

struct Staticbody{
    entityID:uint;
    collider:Collider;
}

enum ParticleSystemSize : int {
    Small = 0,
    Large
}

struct ParticleSystemConfiguration{
   particleCount:int;
   burstMode:bool;
   spawnRate:float;
   particleLifeSpan:float;
   gravity:float;
   startSize:float; 
   endSize:float;
   startColor:vec4;
   endColor:vec4;
}

struct ParticleSystemRenderer{
   entityID:uint;
   size:ParticleSystemSize;
   configuration:ParticleSystemConfiguration;
}

table Entity{
   id:uint;
   name:string;
   transform:Transform;
}

enum SerializableType : int{
   INT = 0,
   FLOAT,
   VEC2
}

table U_int{
   value:int;
}
table U_float{
   value:float;
}
table U_vec2{
   value:vec2;
}

union SerializableValue{
   U_int,
   U_float,
   U_vec2
}

table SerializableProperty{
   type:SerializableType;
   name:string;
   value:SerializableValue;
}

table PropertyGroup{
   properties:[SerializableProperty];
}

table Behaviour{
   entityID:uint;
   propertyGroup:PropertyGroup;
}