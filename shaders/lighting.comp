#version 450

#define chunkSize 32
#define chunkTileCount 1024
#define chunksX  64 
#define maxLightsPerChunk 100
#define ambiantLight 0.001
#define mapOffset 0
#define mapCount 2097152

#define rayMarchStep 0.25


struct LightingUpdate {
	int chunkIndex;
	int lightCount;
	vec2 lightPositions[maxLightsPerChunk];
};

layout(std140, set = 0, binding = 0) readonly buffer baseLightingObjectBuffer{
	LightingUpdate[] baseLightingUpdates;
} ;
layout(std140, set = 0, binding = 1) readonly buffer blueLightingObjectBuffer{
	LightingUpdate[] blurLightingUpdates;
} ;

layout(std430, set = 1, binding = 0) buffer mapFGObjectBuffer {
	int tileMapFGData[];
} ;
layout(std430, set = 1, binding = 1) buffer mapBGObjectBuffer {
	int tileMapBGData[];
} ;
layout(std430, set = 1, binding = 2) readonly buffer mapUpscaleObjectBuffer {
	int tileMapUpscaleData[];
} ;

layout(push_constant) uniform constants{
	int interpolationEnabled;
	int upscaleEnabled;
	int blurEnabled;
};

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

int getTile(int x, int y) {
    int cx = (x / chunkSize);
    int cy = (y / chunkSize);
    int chunk = cy * chunksX + cx;
    int chuckIndexOffset = chunk * chunkTileCount;
    uint index = uint(mapOffset + chuckIndexOffset + (y % chunkSize) * chunkSize + (x % chunkSize));
    return tileMapFGData[index % mapCount];
}

int getBGTile(int x, int y) {
    int cx = (x / chunkSize);
    int cy = (y / chunkSize);
    int chunk = cy * chunksX + cx;
    int chuckIndexOffset = chunk * chunkTileCount;
    uint index = uint(mapOffset + chuckIndexOffset + (y % chunkSize) * chunkSize + (x % chunkSize));
    return tileMapBGData[index % mapCount];
}

void main() 
{

    uint x = gl_LocalInvocationID.x;  
    uint y = gl_LocalInvocationID.y;  

    float brightness = 0.0;
    // float brightness = 1.0;
    int chunk = baseLightingUpdates[gl_WorkGroupID.x].chunkIndex;
    int chuckIndexOffset = chunk * chunkTileCount;
    uint tilemapIndex = mapOffset + chuckIndexOffset + (y * chunkSize) + x;


    uint chunkX = chunk % chunksX;
    uint chunkY = chunk / chunksX;
    uint globX = chunkX * chunkSize + x;
    uint globY = chunkY * chunkSize + y;

    int curtile = getTile(int(globX), int(globY)) & 0xFFFF;

    for(int i = 0; i < baseLightingUpdates[gl_WorkGroupID.x].lightCount; i++)
    {
        vec2 torch = baseLightingUpdates[gl_WorkGroupID.x].lightPositions[i];
        float dist = distance(vec2(globX, globY), torch);
        if(dist < 31){
            
            vec2 lightDir = normalize(torch - vec2(globX, globY));

            int hits = 0;
            for(float j = 0; j < dist; j+= rayMarchStep)
            {
                int tile = getTile(int(globX + 0.5 + lightDir.x * j), int(globY + 0.5 + lightDir.y * j)) & 0xFFFF;
                if(tile != 1023)
                {
                    hits++;
                   // break;
                }
            }    

            if(hits > 0 && curtile == 1023)
            {
                continue;
            }
            dist = clamp(pow(1 - (dist / 31), 2.0), 0.0f, 1.0f);

            float penatration = min(1.0, 1.0 - float(hits) / 16.0);
             brightness += dist * pow(penatration, 5.0);
        }        
    }
    
    float bgSrc = 9999999;
    for(int i = -20; i < 21; i++){
        for(int j = -20; j < 21; j++){
            int bgtile = getBGTile(int(globX + i), int(globY + j));
            int fgtile = getTile(int(globX + i), int(globY + j));
            if((bgtile & 0xFFFF) == 1023 && (fgtile & 0xFFFF) == 1023){
                float d = length(vec2(i, j));
                bgSrc = min(bgSrc, d);   
            }
        }
    }
    brightness = clamp(brightness, ambiantLight, 1.0);

    brightness += max(0.0, pow(1.0 - bgSrc / 20.0, 3));

    brightness = clamp(brightness, ambiantLight, 1.0);


   if(blurEnabled == 0){

      tileMapFGData[tilemapIndex] = (tileMapFGData[tilemapIndex] & 0xFFFF) | int(brightness * 255) << 16;
      tileMapBGData[tilemapIndex] = (tileMapBGData[tilemapIndex] & 0xFFFF) | int(brightness * 255) << 16;
   }
   else{
      tileMapBGData[tilemapIndex] = (tileMapBGData[tilemapIndex] & 0xFFFF) | int(brightness * 255) << 16;
   }
}