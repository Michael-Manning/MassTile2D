
#pragma once

/*
    Generated by ShaderReflector tool
*/

#include <stdint.h>
#include <glm/glm.hpp>
#include "std140.h"

namespace ShaderTypes
{
	/*
		Shader structure ColoredQuadInstance
		Used in:
			- coloredQuad_frag
			- coloredQuad_vert
		Type size: 40
		Array stride: 48
	*/
	struct alignas(16) ColoredQuadInstance
	{
		glm::vec4 color;
		glm::vec2 position;
		glm::vec2 scale;
		int32_t   circle;
		float     rotation;
	};

	/*
		Storage buffer ColoredQuadInstaceBuffer
		Used in:
			- coloredQuad_frag
			- coloredQuad_vert
		Type size: 40
	*/
	struct ColoredQuadInstaceBuffer
	{
		ColoredQuadInstance* instanceData;
	};

	/*
		Uniform buffer CamerUBO
		Used in:
			- coloredQuad_vert
			- coloredTriangles_vert
			- particleSystem_vert
			- text_vert
			- texture_vert
			- tilemapLightRaster_vert
			- tilemap_vert
		Type size: 16
	*/
	struct CamerUBO
	{
		glm::vec2 position;
		float     zoom;
		float     aspectRatio;
	};

	/*
		Shader structure ColoredTriangleInstance
		Used in:
			- coloredTriangles_frag
		Type size: 16
		Array stride: 16
	*/
	struct ColoredTriangleInstance
	{
		glm::vec4 color;
	};

	/*
		Storage buffer ColoredTriangleInstaceBuffer
		Used in:
			- coloredTriangles_frag
		Type size: 16
	*/
	struct ColoredTriangleInstaceBuffer
	{
		ColoredTriangleInstance* instanceData;
	};

	/*
		Storage buffer mapFGObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
			- tilemapLightRaster_frag
			- tilemap_frag
		Type size: 0
	*/
	struct mapFGObjectBuffer
	{
		int32_t* tileMapFGData;
	};

	/*
		Shader structure LightingUpdate
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
		Type size: 1616
		Array stride: 1616
	*/
	struct LightingUpdate
	{
		int32_t                      chunkIndex;
		int32_t                      lightCount;
		alignas(16) std140_vec2Array lightPositions[100];
	};

	/*
		Storage buffer baseLightingObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
		Type size: 1616
	*/
	struct baseLightingObjectBuffer
	{
		LightingUpdate* baseLightingUpdates;
	};

	/*
		Storage buffer blueLightingObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
		Type size: 1616
	*/
	struct blueLightingObjectBuffer
	{
		LightingUpdate* blurLightingUpdates;
	};

	/*
		Storage buffer mapBGObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
			- tilemapLightRaster_frag
			- tilemap_frag
		Type size: 0
	*/
	struct mapBGObjectBuffer
	{
		int32_t* tileMapBGData;
	};

	/*
		Storage buffer mapUpscaleObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
			- tilemapLightRaster_frag
		Type size: 0
	*/
	struct mapUpscaleObjectBuffer
	{
		int32_t* tileMapUpscaleData;
	};

	/*
		Storage buffer mapBlurObjectBuffer
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- tilemapLightRaster_frag
		Type size: 0
	*/
	struct mapBlurObjectBuffer
	{
		int32_t* tileMapBlurData;
	};

	/*
		Push constant LightingSettings
		Used in:
			- lightingBlur_comp
			- lightingUpscale_comp
			- lighting_comp
			- tilemapLightRaster_frag
		Type size: 12
	*/
	struct LightingSettings
	{
		int32_t interpolationEnabled;
		int32_t upscaleEnabled;
		int32_t blurEnabled;
	};

	/*
		Shader structure ParticleSystemConfiguration
		Used in:
			- particleSystem_comp
		Type size: 64
		Array stride: 64
	*/
	struct ParticleSystemConfiguration
	{
		int32_t   particleCount;
		uint32_t  burstMode;
		uint32_t  burstRepeate;
		float     spawnRate;
		float     particleLifeSpan;
		float     gravity;
		float     startSize;
		float     endSize;
		glm::vec4 startColor;
		glm::vec4 endColor;
	};

	/*
		Storage buffer ParticalInstanceConfigBuffer
		Used in:
			- particleSystem_comp
		Type size: 64
	*/
	struct ParticalInstanceConfigBuffer
	{
		ParticleSystemConfiguration* configs;
	};

	/*
		Shader structure Particle
		Used in:
			- particleSystem_comp
			- particleSystem_frag
			- particleSystem_vert
		Type size: 48
		Array stride: 48
	*/
	struct Particle
	{
		glm::vec2             position;
		glm::vec2             velocity;
		float                 scale;
		float                 life;
		alignas(16) glm::vec4 color;
	};

	/*
		Shader structure ParticleGroup_large
		Used in:
			- particleSystem_comp
			- particleSystem_frag
			- particleSystem_vert
		Type size: 19200000
		Array stride: 19200000
	*/
	struct ParticleGroup_large
	{
		Particle particles[400000];
	};

	/*
		Storage buffer ParticalLargeGroupInstanceBuffer
		Used in:
			- particleSystem_comp
			- particleSystem_vert
		Type size: 19200000
	*/
	struct ParticalLargeGroupInstanceBuffer
	{
		ParticleGroup_large* particleGroups_large;
	};

	/*
		Storage buffer AtomicCounterBuffer
		Used in:
			- particleSystem_comp
		Type size: 4
	*/
	struct AtomicCounterBuffer
	{
		uint32_t activeCount;
	};

	/*
		Push constant ParticleDispatchInfo
		Used in:
			- particleSystem_comp
		Type size: 32
	*/
	struct ParticleDispatchInfo
	{
		int32_t   systemIndex;
		int32_t   particlesToSpawn;
		float     deltaTime;
		float     seedX;
		float     seedY;
		int32_t   init;
		glm::vec2 spawnPosition;
	};

	/*
		Shader structure ParticleGroup_small
		Used in:
			- particleSystem_frag
			- particleSystem_vert
		Type size: 19200
		Array stride: 19200
	*/
	struct ParticleGroup_small
	{
		Particle particles[400];
	};

	/*
		Storage buffer ParticalSmallGroupInstanceBuffer
		Used in:
			- particleSystem_frag
			- particleSystem_vert
		Type size: 192000
	*/
	struct ParticalSmallGroupInstanceBuffer
	{
		ParticleGroup_small particleGroups_small[10];
	};

	/*
		Storage buffer ObjectInstaceBuffer_large
		Used in:
			- particleSystem_frag
		Type size: 19200000
	*/
	struct ObjectInstaceBuffer_large
	{
		ParticleGroup_large* particleGroups_large;
	};

	/*
		Push constant ParticleSystemInfo
		Used in:
			- particleSystem_frag
			- particleSystem_vert
		Type size: 8
	*/
	struct ParticleSystemInfo
	{
		int32_t systemIndex;
		int32_t systemSize;
	};

	/*
		Shader structure TexturedQuadInstance
		Used in:
			- texture_frag
			- texture_vert
		Type size: 44
		Array stride: 48
	*/
	struct alignas(16) TexturedQuadInstance
	{
		glm::vec2 uvMin;
		glm::vec2 uvMax;
		glm::vec2 translation;
		glm::vec2 scale;
		float     rotation;
		int32_t   useLightMap;
		int32_t   tex;
	};

	/*
		Storage buffer TextureQuadInstaceBuffer
		Used in:
			- texture_frag
		Type size: 44
	*/
	struct TextureQuadInstaceBuffer
	{
		TexturedQuadInstance* instanceData;
	};

	/*
		Uniform buffer LightMapUBO
		Used in:
			- texture_frag
		Type size: 4
	*/
	struct LightMapUBO
	{
		int32_t lightMapIndex;
	};

	/*
		Storage buffer TexturedQuadInstaceBuffer
		Used in:
			- texture_vert
		Type size: 44
	*/
	struct TexturedQuadInstaceBuffer
	{
		TexturedQuadInstance* instanceData;
	};

	/*
		Shader structure TextHeader
		Used in:
			- text_frag
			- text_vert
		Type size: 44
		Array stride: 48
	*/
	struct alignas(16) TextHeader
	{
		glm::vec4 color;
		glm::vec2 position;
		glm::vec2 scale;
		float     rotation;
		int32_t   _textureIndex;
		int32_t   textLength;
	};

	/*
		Storage buffer TextHeaderInstaceBuffer
		Used in:
			- text_frag
			- text_vert
		Type size: 44
	*/
	struct TextHeaderInstaceBuffer
	{
		TextHeader* headerData;
	};

	/*
		Shader structure CharQuad
		Used in:
			- text_frag
			- text_vert
		Type size: 32
		Array stride: 32
	*/
	struct CharQuad
	{
		glm::vec2 uvmin;
		glm::vec2 uvmax;
		glm::vec2 scale;
		glm::vec2 position;
	};

	/*
		Storage buffer TextDataInstaceBuffer
		Used in:
			- text_frag
			- text_vert
		Type size: 32
	*/
	struct TextDataInstaceBuffer
	{
		CharQuad* textData;
	};

	/*
		Shader structure LetterIndexInfo
		Used in:
			- text_vert
		Type size: 8
		Array stride: 16
	*/
	struct alignas(16) LetterIndexInfo
	{
		uint32_t headerIndex;
		uint32_t letterIndex;
	};

	/*
		Storage buffer TextIndexInstaceBuffer
		Used in:
			- text_vert
		Type size: 8
	*/
	struct TextIndexInstaceBuffer
	{
		LetterIndexInfo* indexData;
	};

	/*
		Push constant TilemapLightingSourceInfo
		Used in:
			- tilemap_frag
		Type size: 8
	*/
	struct TilemapLightingSourceInfo
	{
		int32_t textureIndex;
		int32_t lightingBufferIndex;
	};


} // namespace
    